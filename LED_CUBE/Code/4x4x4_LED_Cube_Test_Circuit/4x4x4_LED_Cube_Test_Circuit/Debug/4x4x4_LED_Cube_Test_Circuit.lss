
4x4x4_LED_Cube_Test_Circuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000006c0  00000754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800204  00800204  00000758  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f49  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f29  00000000  00000000  000027f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009af  00000000  00000000  00003722  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  000040d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069e  00000000  00000000  000043a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116a  00000000  00000000  00004a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00005bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c2       	rjmp	.+1070   	; 0x464 <__vector_13>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a4 e0       	ldi	r26, 0x04	; 4
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 31       	cpi	r26, 0x19	; 25
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_copy_data>:
 104:	12 e0       	ldi	r17, 0x02	; 2
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f6 e0       	ldi	r31, 0x06	; 6
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	0b bf       	out	0x3b, r16	; 59
 112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
 114:	07 90       	elpm	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b1 07       	cpc	r27, r17
 11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>
 11e:	59 d1       	rcall	.+690    	; 0x3d2 <main>
 120:	cd c2       	rjmp	.+1434   	; 0x6bc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <time>:
 124:	fc 01       	movw	r30, r24
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <__system_time>
 12e:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <__system_time+0x1>
 132:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <__system_time+0x2>
 136:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <__system_time+0x3>
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	30 97       	sbiw	r30, 0x00	; 0
 13e:	21 f0       	breq	.+8      	; 0x148 <time+0x24>
 140:	60 83       	st	Z, r22
 142:	71 83       	std	Z+1, r23	; 0x01
 144:	82 83       	std	Z+2, r24	; 0x02
 146:	93 83       	std	Z+3, r25	; 0x03
 148:	08 95       	ret

0000014a <delay_ms>:

// Delay function used in graphical animations.
void delay_ms(unsigned int x)
{
	unsigned int y, z;
	for ( ; x > 0 ; x--){
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	61 f4       	brne	.+24     	; 0x166 <delay_ms+0x1c>
 14e:	08 95       	ret
	...
		for ( y = 0 ; y < 90 ; y++){
			for ( z = 0 ; z < 6 ; z++){
				asm volatile ("nop");
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
// Delay function used in graphical animations.
void delay_ms(unsigned int x)
{
	unsigned int y, z;
	for ( ; x > 0 ; x--){
		for ( y = 0 ; y < 90 ; y++){
 160:	b9 f7       	brne	.-18     	; 0x150 <delay_ms+0x6>

// Delay function used in graphical animations.
void delay_ms(unsigned int x)
{
	unsigned int y, z;
	for ( ; x > 0 ; x--){
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	19 f0       	breq	.+6      	; 0x16c <delay_ms+0x22>
	}
}

// Delay function used in graphical animations.
void delay_ms(unsigned int x)
{
 166:	2a e5       	ldi	r18, 0x5A	; 90
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f2 cf       	rjmp	.-28     	; 0x150 <delay_ms+0x6>
 16c:	08 95       	ret

0000016e <rain>:
 *  Author: Marcus Gasberg
 */ 
#include "Animations.h"

void rain(unsigned int iterations, unsigned int delay,unsigned int holdDelay, unsigned int speed)
{
 16e:	2f 92       	push	r2
 170:	3f 92       	push	r3
 172:	4f 92       	push	r4
 174:	5f 92       	push	r5
 176:	6f 92       	push	r6
 178:	7f 92       	push	r7
 17a:	8f 92       	push	r8
 17c:	9f 92       	push	r9
 17e:	af 92       	push	r10
 180:	bf 92       	push	r11
 182:	cf 92       	push	r12
 184:	df 92       	push	r13
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <rain+0x26>
 194:	00 d0       	rcall	.+0      	; 0x196 <rain+0x28>
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	4c 01       	movw	r8, r24
 19c:	1b 01       	movw	r2, r22
 19e:	5a 83       	std	Y+2, r21	; 0x02
 1a0:	49 83       	std	Y+1, r20	; 0x01
 1a2:	69 01       	movw	r12, r18
	fill(0x00);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	02 d1       	rcall	.+516    	; 0x3ac <fill>
	for (unsigned int i = 0; i < iterations ; i++)
 1a8:	81 14       	cp	r8, r1
 1aa:	91 04       	cpc	r9, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <rain+0x42>
 1ae:	73 c0       	rjmp	.+230    	; 0x296 <rain+0x128>
 1b0:	a1 2c       	mov	r10, r1
 1b2:	b1 2c       	mov	r11, r1
	{
		unsigned int numDrops = rand()%6;
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f6 e0       	ldi	r31, 0x06	; 6
 1b8:	4f 2e       	mov	r4, r31
 1ba:	51 2c       	mov	r5, r1
 1bc:	f0 2d       	mov	r31, r0
		
		for (unsigned drops = 0; drops < numDrops; drops++)
 1be:	71 2c       	mov	r7, r1
void rain(unsigned int iterations, unsigned int delay,unsigned int holdDelay, unsigned int speed)
{
	fill(0x00);
	for (unsigned int i = 0; i < iterations ; i++)
	{
		unsigned int numDrops = rand()%6;
 1c0:	61 2c       	mov	r6, r1
 1c2:	11 d2       	rcall	.+1058   	; 0x5e6 <rand>
 1c4:	b2 01       	movw	r22, r4
 1c6:	b5 d1       	rcall	.+874    	; 0x532 <__divmodhi4>
 1c8:	7c 01       	movw	r14, r24
		
		for (unsigned drops = 0; drops < numDrops; drops++)
 1ca:	89 2b       	or	r24, r25
 1cc:	09 f1       	breq	.+66     	; 0x210 <rain+0xa2>
 1ce:	00 e0       	ldi	r16, 0x00	; 0
		{
			setVoxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,CUBE_SIZE-1); //Set random voxel in the top of the cube
 1d0:	10 e0       	ldi	r17, 0x00	; 0
 1d2:	09 d2       	rcall	.+1042   	; 0x5e6 <rand>
 1d4:	9c 83       	std	Y+4, r25	; 0x04
 1d6:	8b 83       	std	Y+3, r24	; 0x03
 1d8:	06 d2       	rcall	.+1036   	; 0x5e6 <rand>
 1da:	6b 81       	ldd	r22, Y+3	; 0x03
 1dc:	7c 81       	ldd	r23, Y+4	; 0x04
 1de:	63 70       	andi	r22, 0x03	; 3
 1e0:	70 78       	andi	r23, 0x80	; 128
 1e2:	77 23       	and	r23, r23
 1e4:	34 f4       	brge	.+12     	; 0x1f2 <rain+0x84>
 1e6:	61 50       	subi	r22, 0x01	; 1
 1e8:	71 09       	sbc	r23, r1
 1ea:	6c 6f       	ori	r22, 0xFC	; 252
 1ec:	7f 6f       	ori	r23, 0xFF	; 255
 1ee:	6f 5f       	subi	r22, 0xFF	; 255
 1f0:	7f 4f       	sbci	r23, 0xFF	; 255
 1f2:	83 70       	andi	r24, 0x03	; 3
 1f4:	90 78       	andi	r25, 0x80	; 128
 1f6:	99 23       	and	r25, r25
 1f8:	24 f4       	brge	.+8      	; 0x202 <rain+0x94>
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	8c 6f       	ori	r24, 0xFC	; 252
 1fe:	9f 6f       	ori	r25, 0xFF	; 255
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	43 e0       	ldi	r20, 0x03	; 3
 204:	6e d0       	rcall	.+220    	; 0x2e2 <setVoxel>
	fill(0x00);
	for (unsigned int i = 0; i < iterations ; i++)
	{
		unsigned int numDrops = rand()%6;
		
		for (unsigned drops = 0; drops < numDrops; drops++)
 206:	0f 5f       	subi	r16, 0xFF	; 255
 208:	1f 4f       	sbci	r17, 0xFF	; 255
 20a:	e0 16       	cp	r14, r16
 20c:	f1 06       	cpc	r15, r17
		{
			setVoxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,CUBE_SIZE-1); //Set random voxel in the top of the cube
		}
		
		delay_ms(holdDelay);
 20e:	09 f7       	brne	.-62     	; 0x1d2 <rain+0x64>
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	9a df       	rcall	.-204    	; 0x14a <delay_ms>
		for (unsigned int j = 0; j < CUBE_SIZE-1 ; j++)
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	10 e0       	ldi	r17, 0x00	; 0
 21a:	2f c0       	rjmp	.+94     	; 0x27a <rain+0x10c>
			//Shift layer down once
			for (unsigned int z = 0; z < CUBE_SIZE-1; z++)
			{
				for (unsigned int y = 0; y < CUBE_SIZE; y++)
				{
					buffer[y][z] = buffer[y][z+1];
 21c:	5e 83       	std	Y+6, r21	; 0x06
 21e:	4d 83       	std	Y+5, r20	; 0x05
 220:	c9 01       	movw	r24, r18
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	8b 5f       	subi	r24, 0xFB	; 251
 22c:	9d 4f       	sbci	r25, 0xFD	; 253
 22e:	fc 01       	movw	r30, r24
 230:	e4 0f       	add	r30, r20
 232:	f5 1f       	adc	r31, r21
 234:	e0 81       	ld	r30, Z
 236:	86 0f       	add	r24, r22
 238:	97 1f       	adc	r25, r23
 23a:	dc 01       	movw	r26, r24
 23c:	ec 93       	st	X, r30
		for (unsigned int j = 0; j < CUBE_SIZE-1 ; j++)
		{
			//Shift layer down once
			for (unsigned int z = 0; z < CUBE_SIZE-1; z++)
			{
				for (unsigned int y = 0; y < CUBE_SIZE; y++)
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	24 30       	cpi	r18, 0x04	; 4
 244:	31 05       	cpc	r19, r1
 246:	51 f7       	brne	.-44     	; 0x21c <rain+0xae>
		
		delay_ms(holdDelay);
		for (unsigned int j = 0; j < CUBE_SIZE-1 ; j++)
		{
			//Shift layer down once
			for (unsigned int z = 0; z < CUBE_SIZE-1; z++)
 248:	43 30       	cpi	r20, 0x03	; 3
 24a:	51 05       	cpc	r21, r1
 24c:	39 f0       	breq	.+14     	; 0x25c <rain+0xee>
 24e:	ba 01       	movw	r22, r20
	fill(0x00);
	for (unsigned int i = 0; i < iterations ; i++)
	{
		unsigned int numDrops = rand()%6;
		
		for (unsigned drops = 0; drops < numDrops; drops++)
 250:	20 e0       	ldi	r18, 0x00	; 0
			//Shift layer down once
			for (unsigned int z = 0; z < CUBE_SIZE-1; z++)
			{
				for (unsigned int y = 0; y < CUBE_SIZE; y++)
				{
					buffer[y][z] = buffer[y][z+1];
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	ab 01       	movw	r20, r22
 256:	4f 5f       	subi	r20, 0xFF	; 255
				}
			}
			//Clear top layer
			clrPlane('z',CUBE_SIZE-1);
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	e0 cf       	rjmp	.-64     	; 0x21c <rain+0xae>
 25c:	63 e0       	ldi	r22, 0x03	; 3
			
			//Accelerate the raindrop
			delay_ms(speed+(speed)/j);
 25e:	8a e7       	ldi	r24, 0x7A	; 122
 260:	61 d0       	rcall	.+194    	; 0x324 <clrPlane>
 262:	c6 01       	movw	r24, r12
 264:	b8 01       	movw	r22, r16
 266:	51 d1       	rcall	.+674    	; 0x50a <__udivmodhi4>
 268:	cb 01       	movw	r24, r22
 26a:	8c 0d       	add	r24, r12
 26c:	9d 1d       	adc	r25, r13
		{
			setVoxel(rand()%CUBE_SIZE,rand()%CUBE_SIZE,CUBE_SIZE-1); //Set random voxel in the top of the cube
		}
		
		delay_ms(holdDelay);
		for (unsigned int j = 0; j < CUBE_SIZE-1 ; j++)
 26e:	6d df       	rcall	.-294    	; 0x14a <delay_ms>
 270:	0f 5f       	subi	r16, 0xFF	; 255
 272:	1f 4f       	sbci	r17, 0xFF	; 255
 274:	03 30       	cpi	r16, 0x03	; 3
	fill(0x00);
	for (unsigned int i = 0; i < iterations ; i++)
	{
		unsigned int numDrops = rand()%6;
		
		for (unsigned drops = 0; drops < numDrops; drops++)
 276:	11 05       	cpc	r17, r1
 278:	19 f0       	breq	.+6      	; 0x280 <rain+0x112>
 27a:	67 2d       	mov	r22, r7
			clrPlane('z',CUBE_SIZE-1);
			
			//Accelerate the raindrop
			delay_ms(speed+(speed)/j);
		}
		fill(0x00);
 27c:	76 2d       	mov	r23, r6
 27e:	e8 cf       	rjmp	.-48     	; 0x250 <rain+0xe2>
 280:	80 e0       	ldi	r24, 0x00	; 0
		delay_ms(delay);
 282:	94 d0       	rcall	.+296    	; 0x3ac <fill>
 284:	c1 01       	movw	r24, r2
 286:	61 df       	rcall	.-318    	; 0x14a <delay_ms>
#include "Animations.h"

void rain(unsigned int iterations, unsigned int delay,unsigned int holdDelay, unsigned int speed)
{
	fill(0x00);
	for (unsigned int i = 0; i < iterations ; i++)
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	a9 1a       	sub	r10, r25
 28c:	b9 0a       	sbc	r11, r25
 28e:	8a 14       	cp	r8, r10
 290:	9b 04       	cpc	r9, r11
 292:	09 f0       	breq	.+2      	; 0x296 <rain+0x128>
 294:	96 cf       	rjmp	.-212    	; 0x1c2 <rain+0x54>
		}
		fill(0x00);
		delay_ms(delay);
	}
	
}
 296:	26 96       	adiw	r28, 0x06	; 6
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	df 90       	pop	r13
 2b0:	cf 90       	pop	r12
 2b2:	bf 90       	pop	r11
 2b4:	af 90       	pop	r10
 2b6:	9f 90       	pop	r9
 2b8:	8f 90       	pop	r8
 2ba:	7f 90       	pop	r7
 2bc:	6f 90       	pop	r6
 2be:	5f 90       	pop	r5
 2c0:	4f 90       	pop	r4
 2c2:	3f 90       	pop	r3
 2c4:	2f 90       	pop	r2
 2c6:	08 95       	ret

000002c8 <inRange>:
			break;
			
			case 'z':
			for (unsigned char iy = 0; iy < 4 ; iy++)
			{
				buffer[iy][xyzValue] = 0xFF;
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	38 f4       	brcc	.+14     	; 0x2da <inRange+0x12>
 2cc:	64 30       	cpi	r22, 0x04	; 4
 2ce:	38 f4       	brcc	.+14     	; 0x2de <inRange+0x16>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	44 30       	cpi	r20, 0x04	; 4
 2d4:	28 f0       	brcs	.+10     	; 0x2e0 <inRange+0x18>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 95       	ret
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret

000002e2 <setVoxel>:
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	d8 2f       	mov	r29, r24
 2ea:	c6 2f       	mov	r28, r22
 2ec:	14 2f       	mov	r17, r20
 2ee:	ec df       	rcall	.-40     	; 0x2c8 <inRange>
 2f0:	88 23       	and	r24, r24
 2f2:	a1 f0       	breq	.+40     	; 0x31c <setVoxel+0x3a>
 2f4:	ec 2f       	mov	r30, r28
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	eb 5f       	subi	r30, 0xFB	; 251
 302:	fd 4f       	sbci	r31, 0xFD	; 253
 304:	e1 0f       	add	r30, r17
 306:	f1 1d       	adc	r31, r1
 308:	20 81       	ld	r18, Z
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <setVoxel+0x32>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	da 95       	dec	r29
 316:	e2 f7       	brpl	.-8      	; 0x310 <setVoxel+0x2e>
 318:	82 2b       	or	r24, r18
 31a:	80 83       	st	Z, r24
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	08 95       	ret

00000324 <clrPlane>:

xyzValue:	The value for which x,y or z coordinate you want to set the plane.
**************************/
void clrPlane(unsigned char xyz, unsigned char xyzValue)
{
	if (xyzValue < CUBE_SIZE)
 324:	64 30       	cpi	r22, 0x04	; 4
 326:	08 f0       	brcs	.+2      	; 0x32a <clrPlane+0x6>
 328:	40 c0       	rjmp	.+128    	; 0x3aa <clrPlane+0x86>
	{
		switch (xyz)
 32a:	89 37       	cpi	r24, 0x79	; 121
 32c:	49 f1       	breq	.+82     	; 0x380 <clrPlane+0x5c>
 32e:	8a 37       	cpi	r24, 0x7A	; 122
 330:	a1 f1       	breq	.+104    	; 0x39a <clrPlane+0x76>
 332:	88 37       	cpi	r24, 0x78	; 120
 334:	d1 f5       	brne	.+116    	; 0x3aa <clrPlane+0x86>
			case 'x':
			for (unsigned char iy = 0 ; iy < 4 ; iy++)
			{
				for (unsigned char iz = 0; iz < 4 ; iz++)
				{
					buffer[iy][iz] &= ~(1<<xyzValue);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <clrPlane+0x1c>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <clrPlane+0x18>
 344:	38 2f       	mov	r19, r24
 346:	30 95       	com	r19
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	0f c0       	rjmp	.+30     	; 0x36c <clrPlane+0x48>
 34e:	fa 01       	movw	r30, r20
 350:	e8 0f       	add	r30, r24
 352:	f9 1f       	adc	r31, r25
 354:	20 81       	ld	r18, Z
 356:	23 23       	and	r18, r19
 358:	20 83       	st	Z, r18
 35a:	01 96       	adiw	r24, 0x01	; 1
		switch (xyz)
		{
			case 'x':
			for (unsigned char iy = 0 ; iy < 4 ; iy++)
			{
				for (unsigned char iz = 0; iz < 4 ; iz++)
 35c:	84 30       	cpi	r24, 0x04	; 4
 35e:	91 05       	cpc	r25, r1
 360:	b1 f7       	brne	.-20     	; 0x34e <clrPlane+0x2a>
 362:	6f 5f       	subi	r22, 0xFF	; 255
 364:	7f 4f       	sbci	r23, 0xFF	; 255
	if (xyzValue < CUBE_SIZE)
	{
		switch (xyz)
		{
			case 'x':
			for (unsigned char iy = 0 ; iy < 4 ; iy++)
 366:	64 30       	cpi	r22, 0x04	; 4
 368:	71 05       	cpc	r23, r1
 36a:	f9 f0       	breq	.+62     	; 0x3aa <clrPlane+0x86>
			if 'x' is chosen it sets the leds on y and z for the givens xyzValue. 

xyzValue:	The value for which x,y or z coordinate you want to set the plane.
**************************/
void clrPlane(unsigned char xyz, unsigned char xyzValue)
{
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
			case 'x':
			for (unsigned char iy = 0 ; iy < 4 ; iy++)
			{
				for (unsigned char iz = 0; iz < 4 ; iz++)
				{
					buffer[iy][iz] &= ~(1<<xyzValue);
 370:	ab 01       	movw	r20, r22
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	4b 5f       	subi	r20, 0xFB	; 251
 37c:	5d 4f       	sbci	r21, 0xFD	; 253
 37e:	e7 cf       	rjmp	.-50     	; 0x34e <clrPlane+0x2a>
			break;
			
			case 'y':
			for (unsigned char iz = 0 ; iz < 4 ; iz++)
			{
				buffer[xyzValue][iz] = 0x00;
 380:	e6 2f       	mov	r30, r22
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ee 0f       	add	r30, r30
 386:	ff 1f       	adc	r31, r31
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	eb 5f       	subi	r30, 0xFB	; 251
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	10 82       	st	Z, r1
 392:	11 82       	std	Z+1, r1	; 0x01
 394:	12 82       	std	Z+2, r1	; 0x02
 396:	13 82       	std	Z+3, r1	; 0x03
 398:	08 95       	ret
			break;
			
			case 'z':
			for (unsigned char iy = 0; iy < 4 ; iy++)
			{
				buffer[iy][xyzValue] = 0x00;
 39a:	e6 2f       	mov	r30, r22
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	eb 5f       	subi	r30, 0xFB	; 251
 3a0:	fd 4f       	sbci	r31, 0xFD	; 253
 3a2:	10 82       	st	Z, r1
 3a4:	14 82       	std	Z+4, r1	; 0x04
 3a6:	10 86       	std	Z+8, r1	; 0x08
 3a8:	14 86       	std	Z+12, r1	; 0x0c
 3aa:	08 95       	ret

000003ac <fill>:
}


//Fills the cube with either 1's (0xFF) or 0's (0x00)
void fill(unsigned char pattern)
{
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
	for (unsigned char i = 0 ; i < CUBE_SIZE ; i++)
	{
		for (unsigned char j = 0 ; j < CUBE_SIZE ; j++)
		{
			buffer[i][j] = pattern;
 3b0:	f9 01       	movw	r30, r18
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	eb 5f       	subi	r30, 0xFB	; 251
 3bc:	fd 4f       	sbci	r31, 0xFD	; 253
 3be:	80 83       	st	Z, r24
 3c0:	81 83       	std	Z+1, r24	; 0x01
 3c2:	82 83       	std	Z+2, r24	; 0x02
 3c4:	83 83       	std	Z+3, r24	; 0x03
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255


//Fills the cube with either 1's (0xFF) or 0's (0x00)
void fill(unsigned char pattern)
{
	for (unsigned char i = 0 ; i < CUBE_SIZE ; i++)
 3ca:	24 30       	cpi	r18, 0x04	; 4
 3cc:	31 05       	cpc	r19, r1
 3ce:	81 f7       	brne	.-32     	; 0x3b0 <fill+0x4>
		for (unsigned char j = 0 ; j < CUBE_SIZE ; j++)
		{
			buffer[i][j] = pattern;
		}
	}
 3d0:	08 95       	ret

000003d2 <main>:
volatile unsigned char buffer[4][4];
volatile unsigned char currentLayer;

int main(void)
{
	currentLayer = 0;
 3d2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
	initFrameBufferTimer();
 3d6:	84 d0       	rcall	.+264    	; 0x4e0 <initFrameBufferTimer>
	DDRA = 0xFF; //Set clkport Output
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //Set serport Output
 3dc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xFF; //set layerport Output
 3de:	8a b9       	out	0x0a, r24	; 10
	SHIFTREG_CLKPORT = 0x00; //Clear clkport
 3e0:	12 b8       	out	0x02, r1	; 2
	SHIFTREG_SERPORT = 0x00; //Clear Serport
 3e2:	15 b8       	out	0x05, r1	; 5
	LAYER_PORT = 0x00; //Clear Layerport
 3e4:	18 b8       	out	0x08, r1	; 8
	
	srand((unsigned) time(0)); //Seed random number generator for effects
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9c de       	rcall	.-712    	; 0x124 <time>
 3ec:	ff d0       	rcall	.+510    	; 0x5ec <srand>
	
	sei();
 3ee:	78 94       	sei
    while (1) 
    {
		rain(10,2000,1000,600);
 3f0:	28 e5       	ldi	r18, 0x58	; 88
 3f2:	32 e0       	ldi	r19, 0x02	; 2
 3f4:	48 ee       	ldi	r20, 0xE8	; 232
 3f6:	53 e0       	ldi	r21, 0x03	; 3
 3f8:	60 ed       	ldi	r22, 0xD0	; 208
 3fa:	77 e0       	ldi	r23, 0x07	; 7
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	b6 de       	rcall	.-660    	; 0x16e <rain>
 402:	f6 cf       	rjmp	.-20     	; 0x3f0 <main+0x1e>

00000404 <updateCube>:
	{
		for (unsigned char j = 0; j<4; j++)
		{
			//Output the data on DS line according to the
			//Value of MSB
			if((buffer[j][currentLayer] & (1<<7-i)) == 0 )
 404:	67 e0       	ldi	r22, 0x07	; 7
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	a1 e0       	ldi	r26, 0x01	; 1
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	1e c0       	rjmp	.+60     	; 0x44a <updateCube+0x46>
 40e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 412:	f9 01       	movw	r30, r18
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	eb 5f       	subi	r30, 0xFB	; 251
 41e:	fd 4f       	sbci	r31, 0xFD	; 253
 420:	e8 0f       	add	r30, r24
 422:	f1 1d       	adc	r31, r1
 424:	80 81       	ld	r24, Z
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	84 23       	and	r24, r20
 42a:	95 23       	and	r25, r21
 42c:	89 2b       	or	r24, r25
 42e:	11 f4       	brne	.+4      	; 0x434 <updateCube+0x30>
			{
				//MSB is 0 so output low
				SHIFTREG_SERPORT &= ~(1<<SER_PIN);
 430:	28 98       	cbi	0x05, 0	; 5
 432:	01 c0       	rjmp	.+2      	; 0x436 <updateCube+0x32>
			}
			else
			{
				//MSB is 1 so output high
				SHIFTREG_SERPORT |= (1<<SER_PIN);
 434:	28 9a       	sbi	0x05, 0	; 5
			}
			SHIFTREG_CLKPORT &= ~(1<< SHIFT_PIN);
 436:	10 98       	cbi	0x02, 0	; 2
			SHIFTREG_CLKPORT |= (1<< SHIFT_PIN);//Pulse the Shift Clock line
 438:	10 9a       	sbi	0x02, 0	; 2
 43a:	2f 5f       	subi	r18, 0xFF	; 255
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
{
	//Send each 8 bits serially
	//Order is MSB first
	for(unsigned char i=0;i<8;i++)
	{
		for (unsigned char j = 0; j<4; j++)
 43e:	24 30       	cpi	r18, 0x04	; 4
 440:	31 05       	cpc	r19, r1
 442:	29 f7       	brne	.-54     	; 0x40e <updateCube+0xa>
 444:	61 50       	subi	r22, 0x01	; 1
 446:	71 09       	sbc	r23, r1
 448:	50 f0       	brcs	.+20     	; 0x45e <updateCube+0x5a>
 44a:	ad 01       	movw	r20, r26
 44c:	06 2e       	mov	r0, r22
 44e:	02 c0       	rjmp	.+4      	; 0x454 <updateCube+0x50>
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <updateCube+0x4c>
		{
			//Output the data on DS line according to the
			//Value of MSB
			if((buffer[j][currentLayer] & (1<<7-i)) == 0 )
 458:	20 e0       	ldi	r18, 0x00	; 0
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	d8 cf       	rjmp	.-80     	; 0x40e <updateCube+0xa>
		}
	}

	//Now all 8 bits have been transferred to shift register
	//Move them to output latch at one
	SHIFTREG_CLKPORT |= (1<<LATCH_PIN);//Set the pin high to enable on output
 45e:	11 9a       	sbi	0x02, 1	; 2
	SHIFTREG_CLKPORT &= ~(1<<LATCH_PIN);//Set RCLK pin Low
 460:	11 98       	cbi	0x02, 1	; 2
 462:	08 95       	ret

00000464 <__vector_13>:
		//planeJump(10,2000,1000,1500);
	}
}

ISR(TIMER2_COMPA_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	0b b6       	in	r0, 0x3b	; 59
 470:	0f 92       	push	r0
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	//Turn of all layers
	LAYER_PORT = 0;
 48a:	18 b8       	out	0x08, r1	; 8
	
	//Update the cube
	updateCube();
 48c:	bb df       	rcall	.-138    	; 0x404 <updateCube>
	
	//Enable the layer
	LAYER_PORT |= (1<<currentLayer);
 48e:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <__data_end>
 492:	28 b1       	in	r18, 0x08	; 8
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <__vector_13+0x3a>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	3a 95       	dec	r19
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__vector_13+0x36>
 4a2:	82 2b       	or	r24, r18
 4a4:	88 b9       	out	0x08, r24	; 8
	
	//Increment the layer value
	//If we are currently updating layer 3, goto layer 0
	if (currentLayer++ == 3)
 4a6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__data_end>
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	98 0f       	add	r25, r24
 4ae:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <__data_end>
 4b2:	83 30       	cpi	r24, 0x03	; 3
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__vector_13+0x56>
	{
		currentLayer = 0;
 4b6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__data_end>
	}
}
 4ba:	ff 91       	pop	r31
 4bc:	ef 91       	pop	r30
 4be:	bf 91       	pop	r27
 4c0:	af 91       	pop	r26
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	7f 91       	pop	r23
 4c8:	6f 91       	pop	r22
 4ca:	5f 91       	pop	r21
 4cc:	4f 91       	pop	r20
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	0f 90       	pop	r0
 4d4:	0b be       	out	0x3b, r0	; 59
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <initFrameBufferTimer>:
 16000000/256/11 = 56818.18 interrupts per second
 56818.18/4 layers = 1420 frames per second
 *************************************************************************/
void initFrameBufferTimer()
{
	OCR2A = 30; //interrupt at counter = 15
 4e0:	8e e1       	ldi	r24, 0x1E	; 30
 4e2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	TCCR2A |= (1<<WGM21); //CTC mode. Reset Counter when OCR2 reached
 4e6:	e0 eb       	ldi	r30, 0xB0	; 176
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS22); //Set prescaler = 1024
 4f0:	e1 eb       	ldi	r30, 0xB1	; 177
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	86 60       	ori	r24, 0x06	; 6
 4f8:	80 83       	st	Z, r24
	TCNT2 = 0x00; //Set counter register = 0
 4fa:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
	TIMSK2 |= (1<<OCIE2A); // Compare match interrupt when OCR2A reached
 4fe:	e0 e7       	ldi	r30, 0x70	; 112
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	82 60       	ori	r24, 0x02	; 2
 506:	80 83       	st	Z, r24
 508:	08 95       	ret

0000050a <__udivmodhi4>:
 50a:	aa 1b       	sub	r26, r26
 50c:	bb 1b       	sub	r27, r27
 50e:	51 e1       	ldi	r21, 0x11	; 17
 510:	07 c0       	rjmp	.+14     	; 0x520 <__udivmodhi4_ep>

00000512 <__udivmodhi4_loop>:
 512:	aa 1f       	adc	r26, r26
 514:	bb 1f       	adc	r27, r27
 516:	a6 17       	cp	r26, r22
 518:	b7 07       	cpc	r27, r23
 51a:	10 f0       	brcs	.+4      	; 0x520 <__udivmodhi4_ep>
 51c:	a6 1b       	sub	r26, r22
 51e:	b7 0b       	sbc	r27, r23

00000520 <__udivmodhi4_ep>:
 520:	88 1f       	adc	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	5a 95       	dec	r21
 526:	a9 f7       	brne	.-22     	; 0x512 <__udivmodhi4_loop>
 528:	80 95       	com	r24
 52a:	90 95       	com	r25
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	08 95       	ret

00000532 <__divmodhi4>:
 532:	97 fb       	bst	r25, 7
 534:	07 2e       	mov	r0, r23
 536:	16 f4       	brtc	.+4      	; 0x53c <__divmodhi4+0xa>
 538:	00 94       	com	r0
 53a:	06 d0       	rcall	.+12     	; 0x548 <__divmodhi4_neg1>
 53c:	77 fd       	sbrc	r23, 7
 53e:	08 d0       	rcall	.+16     	; 0x550 <__divmodhi4_neg2>
 540:	e4 df       	rcall	.-56     	; 0x50a <__udivmodhi4>
 542:	07 fc       	sbrc	r0, 7
 544:	05 d0       	rcall	.+10     	; 0x550 <__divmodhi4_neg2>
 546:	3e f4       	brtc	.+14     	; 0x556 <__divmodhi4_exit>

00000548 <__divmodhi4_neg1>:
 548:	90 95       	com	r25
 54a:	81 95       	neg	r24
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	08 95       	ret

00000550 <__divmodhi4_neg2>:
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255

00000556 <__divmodhi4_exit>:
 556:	08 95       	ret

00000558 <do_rand>:
 558:	8f 92       	push	r8
 55a:	9f 92       	push	r9
 55c:	af 92       	push	r10
 55e:	bf 92       	push	r11
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	ec 01       	movw	r28, r24
 56e:	68 81       	ld	r22, Y
 570:	79 81       	ldd	r23, Y+1	; 0x01
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	9b 81       	ldd	r25, Y+3	; 0x03
 576:	61 15       	cp	r22, r1
 578:	71 05       	cpc	r23, r1
 57a:	81 05       	cpc	r24, r1
 57c:	91 05       	cpc	r25, r1
 57e:	21 f4       	brne	.+8      	; 0x588 <do_rand+0x30>
 580:	64 e2       	ldi	r22, 0x24	; 36
 582:	79 ed       	ldi	r23, 0xD9	; 217
 584:	8b e5       	ldi	r24, 0x5B	; 91
 586:	97 e0       	ldi	r25, 0x07	; 7
 588:	2d e1       	ldi	r18, 0x1D	; 29
 58a:	33 ef       	ldi	r19, 0xF3	; 243
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	38 d0       	rcall	.+112    	; 0x602 <__divmodsi4>
 592:	49 01       	movw	r8, r18
 594:	5a 01       	movw	r10, r20
 596:	9b 01       	movw	r18, r22
 598:	ac 01       	movw	r20, r24
 59a:	a7 ea       	ldi	r26, 0xA7	; 167
 59c:	b1 e4       	ldi	r27, 0x41	; 65
 59e:	4d d0       	rcall	.+154    	; 0x63a <__muluhisi3>
 5a0:	6b 01       	movw	r12, r22
 5a2:	7c 01       	movw	r14, r24
 5a4:	ac ee       	ldi	r26, 0xEC	; 236
 5a6:	b4 ef       	ldi	r27, 0xF4	; 244
 5a8:	a5 01       	movw	r20, r10
 5aa:	94 01       	movw	r18, r8
 5ac:	52 d0       	rcall	.+164    	; 0x652 <__mulohisi3>
 5ae:	dc 01       	movw	r26, r24
 5b0:	cb 01       	movw	r24, r22
 5b2:	8c 0d       	add	r24, r12
 5b4:	9d 1d       	adc	r25, r13
 5b6:	ae 1d       	adc	r26, r14
 5b8:	bf 1d       	adc	r27, r15
 5ba:	b7 ff       	sbrs	r27, 7
 5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <do_rand+0x6c>
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	a1 09       	sbc	r26, r1
 5c2:	b0 48       	sbci	r27, 0x80	; 128
 5c4:	88 83       	st	Y, r24
 5c6:	99 83       	std	Y+1, r25	; 0x01
 5c8:	aa 83       	std	Y+2, r26	; 0x02
 5ca:	bb 83       	std	Y+3, r27	; 0x03
 5cc:	9f 77       	andi	r25, 0x7F	; 127
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	cf 90       	pop	r12
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	9f 90       	pop	r9
 5e0:	8f 90       	pop	r8
 5e2:	08 95       	ret

000005e4 <rand_r>:
 5e4:	b9 cf       	rjmp	.-142    	; 0x558 <do_rand>

000005e6 <rand>:
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	b6 cf       	rjmp	.-148    	; 0x558 <do_rand>

000005ec <srand>:
 5ec:	a0 e0       	ldi	r26, 0x00	; 0
 5ee:	b0 e0       	ldi	r27, 0x00	; 0
 5f0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 5f4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 5f8:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
 5fc:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
 600:	08 95       	ret

00000602 <__divmodsi4>:
 602:	05 2e       	mov	r0, r21
 604:	97 fb       	bst	r25, 7
 606:	16 f4       	brtc	.+4      	; 0x60c <__divmodsi4+0xa>
 608:	00 94       	com	r0
 60a:	0f d0       	rcall	.+30     	; 0x62a <__negsi2>
 60c:	57 fd       	sbrc	r21, 7
 60e:	05 d0       	rcall	.+10     	; 0x61a <__divmodsi4_neg2>
 610:	24 d0       	rcall	.+72     	; 0x65a <__udivmodsi4>
 612:	07 fc       	sbrc	r0, 7
 614:	02 d0       	rcall	.+4      	; 0x61a <__divmodsi4_neg2>
 616:	46 f4       	brtc	.+16     	; 0x628 <__divmodsi4_exit>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__negsi2>

0000061a <__divmodsi4_neg2>:
 61a:	50 95       	com	r21
 61c:	40 95       	com	r20
 61e:	30 95       	com	r19
 620:	21 95       	neg	r18
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	4f 4f       	sbci	r20, 0xFF	; 255
 626:	5f 4f       	sbci	r21, 0xFF	; 255

00000628 <__divmodsi4_exit>:
 628:	08 95       	ret

0000062a <__negsi2>:
 62a:	90 95       	com	r25
 62c:	80 95       	com	r24
 62e:	70 95       	com	r23
 630:	61 95       	neg	r22
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__muluhisi3>:
 63a:	31 d0       	rcall	.+98     	; 0x69e <__umulhisi3>
 63c:	a5 9f       	mul	r26, r21
 63e:	90 0d       	add	r25, r0
 640:	b4 9f       	mul	r27, r20
 642:	90 0d       	add	r25, r0
 644:	a4 9f       	mul	r26, r20
 646:	80 0d       	add	r24, r0
 648:	91 1d       	adc	r25, r1
 64a:	11 24       	eor	r1, r1
 64c:	08 95       	ret

0000064e <__mulshisi3>:
 64e:	b7 ff       	sbrs	r27, 7
 650:	f4 cf       	rjmp	.-24     	; 0x63a <__muluhisi3>

00000652 <__mulohisi3>:
 652:	f3 df       	rcall	.-26     	; 0x63a <__muluhisi3>
 654:	82 1b       	sub	r24, r18
 656:	93 0b       	sbc	r25, r19
 658:	08 95       	ret

0000065a <__udivmodsi4>:
 65a:	a1 e2       	ldi	r26, 0x21	; 33
 65c:	1a 2e       	mov	r1, r26
 65e:	aa 1b       	sub	r26, r26
 660:	bb 1b       	sub	r27, r27
 662:	fd 01       	movw	r30, r26
 664:	0d c0       	rjmp	.+26     	; 0x680 <__udivmodsi4_ep>

00000666 <__udivmodsi4_loop>:
 666:	aa 1f       	adc	r26, r26
 668:	bb 1f       	adc	r27, r27
 66a:	ee 1f       	adc	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	a2 17       	cp	r26, r18
 670:	b3 07       	cpc	r27, r19
 672:	e4 07       	cpc	r30, r20
 674:	f5 07       	cpc	r31, r21
 676:	20 f0       	brcs	.+8      	; 0x680 <__udivmodsi4_ep>
 678:	a2 1b       	sub	r26, r18
 67a:	b3 0b       	sbc	r27, r19
 67c:	e4 0b       	sbc	r30, r20
 67e:	f5 0b       	sbc	r31, r21

00000680 <__udivmodsi4_ep>:
 680:	66 1f       	adc	r22, r22
 682:	77 1f       	adc	r23, r23
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	1a 94       	dec	r1
 68a:	69 f7       	brne	.-38     	; 0x666 <__udivmodsi4_loop>
 68c:	60 95       	com	r22
 68e:	70 95       	com	r23
 690:	80 95       	com	r24
 692:	90 95       	com	r25
 694:	9b 01       	movw	r18, r22
 696:	ac 01       	movw	r20, r24
 698:	bd 01       	movw	r22, r26
 69a:	cf 01       	movw	r24, r30
 69c:	08 95       	ret

0000069e <__umulhisi3>:
 69e:	a2 9f       	mul	r26, r18
 6a0:	b0 01       	movw	r22, r0
 6a2:	b3 9f       	mul	r27, r19
 6a4:	c0 01       	movw	r24, r0
 6a6:	a3 9f       	mul	r26, r19
 6a8:	70 0d       	add	r23, r0
 6aa:	81 1d       	adc	r24, r1
 6ac:	11 24       	eor	r1, r1
 6ae:	91 1d       	adc	r25, r1
 6b0:	b2 9f       	mul	r27, r18
 6b2:	70 0d       	add	r23, r0
 6b4:	81 1d       	adc	r24, r1
 6b6:	11 24       	eor	r1, r1
 6b8:	91 1d       	adc	r25, r1
 6ba:	08 95       	ret

000006bc <_exit>:
 6bc:	f8 94       	cli

000006be <__stop_program>:
 6be:	ff cf       	rjmp	.-2      	; 0x6be <__stop_program>
