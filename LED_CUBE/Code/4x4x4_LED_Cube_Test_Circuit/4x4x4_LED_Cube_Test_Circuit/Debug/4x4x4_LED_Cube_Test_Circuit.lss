
4x4x4_LED_Cube_Test_Circuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800200  00800200  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011dd  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e35  00000000  00000000  000015dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000046f  00000000  00000000  00002412  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064a  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f2  00000000  00000000  00003042  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	e5 c0       	rjmp	.+458    	; 0x200 <__vector_13>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 31       	cpi	r26, 0x12	; 18
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	30 d0       	rcall	.+96     	; 0x166 <main>
 106:	b8 c0       	rjmp	.+368    	; 0x278 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <inRange>:
{
	if(inRange(x,y,z))
	{
		buffer[y][z] &= ~(1<<x);
	}
}
 10a:	84 30       	cpi	r24, 0x04	; 4
 10c:	38 f4       	brcc	.+14     	; 0x11c <inRange+0x12>
 10e:	64 30       	cpi	r22, 0x04	; 4
 110:	38 f4       	brcc	.+14     	; 0x120 <inRange+0x16>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	44 30       	cpi	r20, 0x04	; 4
 116:	28 f0       	brcs	.+10     	; 0x122 <inRange+0x18>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret

00000124 <toggleVoxel>:

//Toggles the state of a voxel in the cube
void toggleVoxel(unsigned char x,unsigned char y,unsigned char z)
{
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	d8 2f       	mov	r29, r24
 12c:	c6 2f       	mov	r28, r22
 12e:	14 2f       	mov	r17, r20
	if(inRange(x,y,z))
 130:	ec df       	rcall	.-40     	; 0x10a <inRange>
 132:	88 23       	and	r24, r24
 134:	a1 f0       	breq	.+40     	; 0x15e <toggleVoxel+0x3a>
	{
		buffer[y][z] ^= (1<<x);
 136:	ec 2f       	mov	r30, r28
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	ee 5f       	subi	r30, 0xFE	; 254
 144:	fd 4f       	sbci	r31, 0xFD	; 253
 146:	e1 0f       	add	r30, r17
 148:	f1 1d       	adc	r31, r1
 14a:	20 81       	ld	r18, Z
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <toggleVoxel+0x32>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	da 95       	dec	r29
 158:	e2 f7       	brpl	.-8      	; 0x152 <toggleVoxel+0x2e>
 15a:	82 27       	eor	r24, r18
 15c:	80 83       	st	Z, r24
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	08 95       	ret

00000166 <main>:
volatile unsigned int z;

int main(void)
{
	unsigned char i,j = 0;
	z = 0;
 166:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 16a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	initFrameBufferTimer();
 16e:	6f d0       	rcall	.+222    	; 0x24e <initFrameBufferTimer>
	DDRA = 0xFF; //Set PORTA Output
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //Set PORTB Output
 174:	84 b9       	out	0x04, r24	; 4
	PORTA = 0x00; //Clear PORTA
 176:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00; //Clear PORTB
 178:	15 b8       	out	0x05, r1	; 5
	sei();
 17a:	78 94       	sei
    while (1) 
    {
		for (unsigned char i = 0; i < 4; i++)
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <main+0x40>
		{
			for (unsigned char j = 0; j<4; j++)
			{
				toggleVoxel(i,j,0);
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	6c 2f       	mov	r22, r28
 184:	8d 2f       	mov	r24, r29
 186:	ce df       	rcall	.-100    	; 0x124 <toggleVoxel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f e3       	ldi	r18, 0x3F	; 63
 18a:	8d e0       	ldi	r24, 0x0D	; 13
 18c:	93 e0       	ldi	r25, 0x03	; 3
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0x28>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x32>
 198:	00 00       	nop
	sei();
    while (1) 
    {
		for (unsigned char i = 0; i < 4; i++)
		{
			for (unsigned char j = 0; j<4; j++)
 19a:	cf 5f       	subi	r28, 0xFF	; 255
 19c:	c4 30       	cpi	r28, 0x04	; 4
 19e:	81 f7       	brne	.-32     	; 0x180 <main+0x1a>
	PORTA = 0x00; //Clear PORTA
	PORTB = 0x00; //Clear PORTB
	sei();
    while (1) 
    {
		for (unsigned char i = 0; i < 4; i++)
 1a0:	df 5f       	subi	r29, 0xFF	; 255
 1a2:	d4 30       	cpi	r29, 0x04	; 4
 1a4:	59 f3       	breq	.-42     	; 0x17c <main+0x16>

volatile unsigned char buffer[4][4];
volatile unsigned int z;

int main(void)
{
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	eb cf       	rjmp	.-42     	; 0x180 <main+0x1a>

000001aa <updateCube>:


void updateCube()
{
	//Send each 8 bits serially
	cli();
 1aa:	f8 94       	cli
 1ac:	67 e0       	ldi	r22, 0x07	; 7
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	a1 e0       	ldi	r26, 0x01	; 1
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	18 c0       	rjmp	.+48     	; 0x1e6 <updateCube+0x3c>
	{
		for (unsigned char j = 0; j<4; j++)
		{
			//Output the data on DS line according to the
			//Value of MSB
			if((buffer[3-j][0] & (1<<7-i)) == 0 )
 1b6:	f9 01       	movw	r30, r18
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	ee 5f       	subi	r30, 0xFE	; 254
 1c2:	fd 4f       	sbci	r31, 0xFD	; 253
 1c4:	80 81       	ld	r24, Z
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	84 23       	and	r24, r20
 1ca:	95 23       	and	r25, r21
 1cc:	89 2b       	or	r24, r25
 1ce:	11 f4       	brne	.+4      	; 0x1d4 <updateCube+0x2a>
			{
				//MSB is 0 so output low
				SHIFTREG_SERPORT &= ~(1<<SER_PIN);
 1d0:	28 98       	cbi	0x05, 0	; 5
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <updateCube+0x2c>
			}
			else
			{
				//MSB is 1 so output high
				SHIFTREG_SERPORT |= (1<<SER_PIN);
 1d4:	28 9a       	sbi	0x05, 0	; 5
			}
			SHIFTREG_CLKPORT &= ~(1<< SHIFT_PIN);
 1d6:	10 98       	cbi	0x02, 0	; 2
			SHIFTREG_CLKPORT |= (1<< SHIFT_PIN);//Pulse the Shift Clock line
 1d8:	10 9a       	sbi	0x02, 0	; 2
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	31 09       	sbc	r19, r1
 1de:	58 f7       	brcc	.-42     	; 0x1b6 <updateCube+0xc>
 1e0:	61 50       	subi	r22, 0x01	; 1
 1e2:	71 09       	sbc	r23, r1
 1e4:	50 f0       	brcs	.+20     	; 0x1fa <updateCube+0x50>
 1e6:	ad 01       	movw	r20, r26
 1e8:	06 2e       	mov	r0, r22
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <updateCube+0x46>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <updateCube+0x42>
	{
		for (unsigned char j = 0; j<4; j++)
		{
			//Output the data on DS line according to the
			//Value of MSB
			if((buffer[3-j][0] & (1<<7-i)) == 0 )
 1f4:	23 e0       	ldi	r18, 0x03	; 3
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	de cf       	rjmp	.-68     	; 0x1b6 <updateCube+0xc>
		}
	}

	//Now all 8 bits have been transferred to shift register
	//Move them to output latch at one
	SHIFTREG_CLKPORT |= (1<<LATCH_PIN);//Set the pin high to enable on output
 1fa:	11 9a       	sbi	0x02, 1	; 2
	SHIFTREG_CLKPORT &= ~(1<<LATCH_PIN);//Set RCLK pin Low
 1fc:	11 98       	cbi	0x02, 1	; 2
 1fe:	08 95       	ret

00000200 <__vector_13>:
		}
	}
}

ISR(TIMER2_COMPA_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	updateCube();
 226:	c1 df       	rcall	.-126    	; 0x1aa <updateCube>
	
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0b be       	out	0x3b, r0	; 59
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <initFrameBufferTimer>:
 16000000/256/11 = 56818.18 interrupts per second
 56818.18/4 layers = 1420 frames per second
 *************************************************************************/
void initFrameBufferTimer()
{
	OCR2A = 10; //interrupt at counter = 10
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	TCCR2A |= (1<<WGM21); //CTC mode. Reset Counter when OCR2 reached
 254:	e0 eb       	ldi	r30, 0xB0	; 176
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21)|(1<<CS22); //Set prescaler = 256
 25e:	e1 eb       	ldi	r30, 0xB1	; 177
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	86 60       	ori	r24, 0x06	; 6
 266:	80 83       	st	Z, r24
	TCNT2 = 0x00; //Set counter register = 0
 268:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
	TIMSK2 |= (1<<OCIE2A); // Compare match interrupt when OCR2A reached
 26c:	e0 e7       	ldi	r30, 0x70	; 112
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	82 60       	ori	r24, 0x02	; 2
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
