
4x4x4_LED_Cube_Test_Circuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800200  00800200  000003f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001205  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d23  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a7  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fe  00000000  00000000  00002a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000505  00000000  00000000  0000308e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__vector_13>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 31       	cpi	r26, 0x12	; 18
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	9e d0       	rcall	.+316    	; 0x242 <main>
 106:	3c c1       	rjmp	.+632    	; 0x380 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_13>:
		_delay_ms(5000);
    }
}

ISR(TIMER2_COMPA_vect)
{
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	0b b6       	in	r0, 0x3b	; 59
 116:	0f 92       	push	r0
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	SHIFTREG_CLKPORT &= ~(1<<SRCLK_PIN); //Set SRCLK Low
 12a:	10 98       	cbi	0x02, 0	; 2
	SHIFTREG_CLKPORT &= ~(1<<RCLK_PIN);//Set RCLK pin Low 
 12c:	11 98       	cbi	0x02, 1	; 2
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
		{
			SHIFTREG_SERPORT &= ~(1<<y);
		}
		else
		{
			SHIFTREG_SERPORT |= (1<<y);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
{
	SHIFTREG_CLKPORT &= ~(1<<SRCLK_PIN); //Set SRCLK Low
	SHIFTREG_CLKPORT &= ~(1<<RCLK_PIN);//Set RCLK pin Low 
	for (unsigned char j = 0; j < 8; j++)
	{
		if ((buffer[z][y] & (1<<j)) == 0 )
 136:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_edata>
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y>
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	ef 5f       	subi	r30, 0xFF	; 255
 14a:	fd 4f       	sbci	r31, 0xFD	; 253
 14c:	e8 0f       	add	r30, r24
 14e:	f1 1d       	adc	r31, r1
 150:	80 81       	ld	r24, Z
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 2e       	mov	r0, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <__vector_13+0x52>
 158:	95 95       	asr	r25
 15a:	87 95       	ror	r24
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <__vector_13+0x4e>
 160:	80 fd       	sbrc	r24, 0
 162:	0f c0       	rjmp	.+30     	; 0x182 <__vector_13+0x78>
		{
			SHIFTREG_SERPORT &= ~(1<<y);
 164:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y>
 168:	65 b1       	in	r22, 0x05	; 5
 16a:	fa 01       	movw	r30, r20
 16c:	02 c0       	rjmp	.+4      	; 0x172 <__vector_13+0x68>
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <__vector_13+0x64>
 176:	cf 01       	movw	r24, r30
 178:	80 95       	com	r24
 17a:	90 95       	com	r25
 17c:	86 23       	and	r24, r22
 17e:	85 b9       	out	0x05, r24	; 5
 180:	0c c0       	rjmp	.+24     	; 0x19a <__vector_13+0x90>
		}
		else
		{
			SHIFTREG_SERPORT |= (1<<y);
 182:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y>
 186:	65 b1       	in	r22, 0x05	; 5
 188:	fa 01       	movw	r30, r20
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__vector_13+0x86>
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <__vector_13+0x82>
 194:	cf 01       	movw	r24, r30
 196:	86 2b       	or	r24, r22
 198:	85 b9       	out	0x05, r24	; 5
		}
		SHIFTREG_CLKPORT |= (1<<SRCLK_PIN); //Set SRCLK High to store the values
 19a:	10 9a       	sbi	0x02, 0	; 2
		SHIFTREG_CLKPORT &= ~(1<<SRCLK_PIN); //Set SRCLK Low
 19c:	10 98       	cbi	0x02, 0	; 2
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255

ISR(TIMER2_COMPA_vect)
{
	SHIFTREG_CLKPORT &= ~(1<<SRCLK_PIN); //Set SRCLK Low
	SHIFTREG_CLKPORT &= ~(1<<RCLK_PIN);//Set RCLK pin Low 
	for (unsigned char j = 0; j < 8; j++)
 1a2:	28 30       	cpi	r18, 0x08	; 8
 1a4:	31 05       	cpc	r19, r1
 1a6:	39 f6       	brne	.-114    	; 0x136 <__vector_13+0x2c>
		}
		SHIFTREG_CLKPORT |= (1<<SRCLK_PIN); //Set SRCLK High to store the values
		SHIFTREG_CLKPORT &= ~(1<<SRCLK_PIN); //Set SRCLK Low
	}
	
	SHIFTREG_CLKPORT |= (1<<RCLK_PIN);//Set the pin high to enable on output
 1a8:	11 9a       	sbi	0x02, 1	; 2
	
	if (y++ == 1)
 1aa:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <y>
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	98 0f       	add	r25, r24
 1b2:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <y>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	11 f4       	brne	.+4      	; 0x1be <__vector_13+0xb4>
	{
		y = 0;
 1ba:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <y>
	}
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0b be       	out	0x3b, r0	; 59
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <inRange>:
		buffer[z][y] &= ~(1<<x);
	}
}
unsigned char inRange(int x,int y,int z)
{
	if(x>=0 && x<4 && y>=0 && y<4 && z>=0 && z<4)
 1de:	04 97       	sbiw	r24, 0x04	; 4
 1e0:	48 f4       	brcc	.+18     	; 0x1f4 <inRange+0x16>
 1e2:	64 30       	cpi	r22, 0x04	; 4
 1e4:	71 05       	cpc	r23, r1
 1e6:	40 f4       	brcc	.+16     	; 0x1f8 <inRange+0x1a>
	{
		return 0x01;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	44 30       	cpi	r20, 0x04	; 4
 1ec:	51 05       	cpc	r21, r1
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <inRange+0x1c>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
	}
	else
	{
		return 0x00;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	80 e0       	ldi	r24, 0x00	; 0
	}
 1fa:	08 95       	ret

000001fc <setVoxel>:
		y = 0;
	}
}

void setVoxel(int x,int y,int z)
{
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	f8 2e       	mov	r15, r24
 208:	8b 01       	movw	r16, r22
 20a:	ea 01       	movw	r28, r20
	if(inRange(x,y,z))
 20c:	e8 df       	rcall	.-48     	; 0x1de <inRange>
 20e:	88 23       	and	r24, r24
 210:	91 f0       	breq	.+36     	; 0x236 <setVoxel+0x3a>
	{
		buffer[z][y] |=(1<<x);
 212:	cc 0f       	add	r28, r28
 214:	dd 1f       	adc	r29, r29
 216:	cc 0f       	add	r28, r28
 218:	dd 1f       	adc	r29, r29
 21a:	cf 5f       	subi	r28, 0xFF	; 255
 21c:	dd 4f       	sbci	r29, 0xFD	; 253
 21e:	c0 0f       	add	r28, r16
 220:	d1 1f       	adc	r29, r17
 222:	28 81       	ld	r18, Y
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <setVoxel+0x32>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	fa 94       	dec	r15
 230:	e2 f7       	brpl	.-8      	; 0x22a <setVoxel+0x2e>
 232:	82 2b       	or	r24, r18
 234:	88 83       	st	Y, r24
	}
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	ff 90       	pop	r15
 240:	08 95       	ret

00000242 <main>:
volatile unsigned char buffer[4][4];
volatile unsigned char y,z = 0;

int main(void)
{	
	DDRA = 0xFF; //Set PORTA Output
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF; //Set PORTB Output
 246:	84 b9       	out	0x04, r24	; 4
	PORTA = 0x00; //Clear PORTA
 248:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x00; //Clear PORTB
 24a:	15 b8       	out	0x05, r1	; 5
	SHIFTREG_CLKPORT |= (1<<RCLK_PIN);//Set the pin high to enable on output
 24c:	11 9a       	sbi	0x02, 1	; 2
	SHIFTREG_CLKPORT &= ~(1<<RCLK_PIN);//Set the pin Low again
 24e:	11 98       	cbi	0x02, 1	; 2
	
	initFrameBufferTimer();
 250:	82 d0       	rcall	.+260    	; 0x356 <initFrameBufferTimer>
	sei();
 252:	78 94       	sei
    while (1) 
    {
		setVoxel(0,0,0);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	cd df       	rcall	.-102    	; 0x1fc <setVoxel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 262:	2f e3       	ldi	r18, 0x3F	; 63
 264:	82 e4       	ldi	r24, 0x42	; 66
 266:	9f e0       	ldi	r25, 0x0F	; 15
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x26>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x30>
 272:	00 00       	nop
		_delay_ms(5000);
		setVoxel(1,0,0);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	bd df       	rcall	.-134    	; 0x1fc <setVoxel>
 282:	2f e3       	ldi	r18, 0x3F	; 63
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	9f e0       	ldi	r25, 0x0F	; 15
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0x46>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0x50>
 292:	00 00       	nop
		_delay_ms(5000);
		setVoxel(2,0,0);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	ad df       	rcall	.-166    	; 0x1fc <setVoxel>
 2a2:	2f e3       	ldi	r18, 0x3F	; 63
 2a4:	82 e4       	ldi	r24, 0x42	; 66
 2a6:	9f e0       	ldi	r25, 0x0F	; 15
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x66>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x70>
 2b2:	00 00       	nop
		_delay_ms(5000);
		setVoxel(3,0,0);
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9d df       	rcall	.-198    	; 0x1fc <setVoxel>
 2c2:	2f e3       	ldi	r18, 0x3F	; 63
 2c4:	82 e4       	ldi	r24, 0x42	; 66
 2c6:	9f e0       	ldi	r25, 0x0F	; 15
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x86>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x90>
 2d2:	00 00       	nop
		_delay_ms(5000);
		setVoxel(0,1,0);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	8d df       	rcall	.-230    	; 0x1fc <setVoxel>
 2e2:	2f e3       	ldi	r18, 0x3F	; 63
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	9f e0       	ldi	r25, 0x0F	; 15
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0xa6>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0xb0>
 2f2:	00 00       	nop
		_delay_ms(5000);
		setVoxel(1,1,0);
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	7d df       	rcall	.-262    	; 0x1fc <setVoxel>
 302:	2f e3       	ldi	r18, 0x3F	; 63
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0xc6>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0xd0>
		_delay_ms(5000);
		setVoxel(2,1,0);
 312:	00 00       	nop
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	6d df       	rcall	.-294    	; 0x1fc <setVoxel>
 322:	2f e3       	ldi	r18, 0x3F	; 63
 324:	82 e4       	ldi	r24, 0x42	; 66
 326:	9f e0       	ldi	r25, 0x0F	; 15
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0xe6>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0xf0>
		_delay_ms(5000);
		setVoxel(3,1,0);
 332:	00 00       	nop
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	5d df       	rcall	.-326    	; 0x1fc <setVoxel>
 342:	2f e3       	ldi	r18, 0x3F	; 63
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	9f e0       	ldi	r25, 0x0F	; 15
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x106>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x110>
 352:	00 00       	nop
 354:	7f cf       	rjmp	.-258    	; 0x254 <main+0x12>

00000356 <initFrameBufferTimer>:
 16000000/256/11 = 56818.18 interrupts per second
 56818.18/4 layers = 1420 frames per second
 *************************************************************************/
void initFrameBufferTimer()
{
	OCR2A = 10; //interrupt at counter = 10
 356:	8a e0       	ldi	r24, 0x0A	; 10
 358:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7000b3>
	TCCR2A |= (1<<WGM21); //CTC mode. Reset Counter when OCR2 reached
 35c:	e0 eb       	ldi	r30, 0xB0	; 176
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	82 60       	ori	r24, 0x02	; 2
 364:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS21)|(1<<CS22); //Set prescaler = 256
 366:	e1 eb       	ldi	r30, 0xB1	; 177
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	86 60       	ori	r24, 0x06	; 6
 36e:	80 83       	st	Z, r24
	TCNT2 = 0x00; //Set counter register = 0
 370:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7000b2>
	TIMSK2 |= (1<<OCIE2A); // Compare match interrupt when OCR2A reached
 374:	e0 e7       	ldi	r30, 0x70	; 112
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
